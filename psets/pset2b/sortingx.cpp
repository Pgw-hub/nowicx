//	
//	Lecture Note by idebtor@gmail.com
//	
//	This program is written to test the sort algorithms interactively. 
//	It takes the number of data samples to sort from the user. Then, the int 
//	array is created and filled with random numbers. The User may select one 
//	of sort functions to be used. Then execution time and its output is displayed.
//	
//	01/10/21:	Created in C++ by idebtor@gmail.com
// 
//	Subjects: 
//		- Sort algorithms: bubble, insertion, mergesort, quicksort, selection sort
//		- Shuffle/randomize algorithms
//		- Using static libraries, header files
//		- Using function pointers as a first class object
//		- Using rand(), srand(), %, new, delete, nothrow, assert()
//		- Using C++ string stream <sstream>
//		- Using STL map container
//	
//	Before Compilation, you must have some files (static library and include file) 
//	ready as shown below:
//	nowic.h, sort.h, rand.h, libnowic.a, libsort.a, librand.a 
//
//	Compilation:
//	g++ sorting.cpp -I../../include -L../../lib -lnowic -lsort -lrand -o sorting 

#include <ctime>
#include <cassert>
#include <iostream>
#include <sstream>
#include <map>
#include "nowic.h"
#include "sort.h"
#include "rand.h"
using namespace std;

// shuffles the sequence randomly. 
// For every sample, starting from the first element in the list, it is swapped with 
// the element randomly selected by the index generated by a 'real' (not pseudo) 
// random number out of from 0 to N - 1.
// Hint: Refer to rand() and srand() function document, random.pdf provided.
void randomize_bruteforce(int list[], int n) {

	for (int i = 0; i < n; i++){
        int a = rand()%n;
        swap(list[i],list[a]);
    }		
}

void show_timeit(int begin) { 	// display elapsed time
	cout << "\tcpu: " << ((double)clock() - begin) / CLOCKS_PER_SEC << " sec\n";
}

// sort driver to test sort functions or algorithms.
int main(int argc, char *argv[]) {
	char choice;
	int keyin;
	clock_t begin;
	int show_n = 20;					// the total number of samples to show
	int per_line = 10;					// the number of samples per line to show
	int N = 50;							// a magic number - initial number of samples
	int *list = new (nothrow) int[N];   // create a list 
	assert(list != nullptr);
	for (int i = 0; i < N; i++) list[i] = i;
	// Declare a comparator function pointer 'comp_fp' variable and initialize 
	// it with an ascending order comparator function, '::less'.
	bool (*comp_fp)(int,int) = ::less;      	// declare comp_fp 
	// Declare a sort function pointer variable 'sort_fp' and initialize it 
	// with a sort function, 'bubblesort':
    void (*sort_fp)(int*,int,bool(*)(int,int)) = bubblesort;// declare sort_fp
    //그니까 sort_fp가 bubblesort라는 함수를 가리키고 있는 함수포인터이고, 이 함수포인터는 아래에 sort_map의 key에 들어갈 수 있댜.
	///////////////////////////////////////////////////////////////////////////////
	// Two STL maps are used for showing the current status of user's selections.
	// comp_map[xxx_fp] contains one of sorting-orders, "Ascending" or "Descending".
	// sort_map[xxx_fp] contains one of sorting algorithms. 
	///////////////////////////////////////////////////////////////////////////////
	// Define a STL map variable 'comp_map' to associate the comparator 
	// function pointer with a description such as "Ascending" and "Descending", 
	// respectively.
	map<bool(*)(int,int),string> comp_map; 		// define comp_map
	// Insert(or populate) 'comp_map' with two keys and values pairs. 
	comp_map[comp_fp]="Ascending";
	//여기에다가 선언을 해줘야함. 


    // for "Ascending" and for "Descending"
	// Define a STL map variable 'sort_map' to associate <key_type, value_type> pair,  
	// where key_type is sort fp and value_type is a description of the sort name.
	map<void(*)(int*,int,bool(*)(int,int)),string> sort_map;
    		// define sort_map
	// Insert (or populate) 'sort_map' with key and value pairs. 
	// For example, sort_map[bubblesort] = "Bubble";
	sort_map[sort_fp] = "Bubble"; //이건 함수포인터가 앞에 있는 케이스이다. 어떻게 접근? key로 value접근
	///////////////////////////////////////////////////////////////////////////////
    //map에서 함수포인터 접근
	setvbuf(stdout, NULL, _IONBF, 0);  	// prevent output from buffered on console

	do {
        if(comp_fp == more) comp_map[comp_fp] = "Desending";//o를 실행했을때 출력값을 바꿔줘야하기 때문에.

		printlist(list, N, show_n, per_line);//일단 냅다 출력부터한다.
		stringstream ss;
		ss << "\tMENU[ sort=" << sort_map[sort_fp] << " order=" << comp_map[comp_fp];
		ss << " N=" << N << " show_n=" << show_n << " per_line=" << per_line << " ]";
		cout << ss.str() << endl;
		cout << "\tB - Bubblesort\t" 		<< "\tn - set N samples and initialize\n"; 
		cout << "\tI - Insertionsort"	 	<< "\tr - randomize(shuffle) samples\n";
		cout << "\tM - Mergesort\t"			<< "\tm - max samples to show: show_n\n";
		cout << "\tQ - Quicksort\t" 		<< "\tl - max samples to show: per_line\n";
		cout << "\tS - Selectionsort"		<< "\to - order[Ascending/Descending]\n";	
		cout << "\t\t\t"					<< "\ts - sort()\n";
		choice = GetChar("\tCommand(q to quit): ");
        
		switch (choice) {
		case 'B'://완료
            sort_fp = bubblesort;
            sort_map[sort_fp] = "Bubble";
			break;
		case 'I'://완료
            sort_fp = insertionsort;
			sort_map[sort_fp] = "Insertion";
			break;
		case 'M'://완료
            sort_fp = mergesort;
			sort_map[sort_fp] = "Merge";
			break;
		case 'Q'://완료
            sort_fp = quicksort;
			sort_map[sort_fp] = "Quick";
			break;
		case 'S'://완료
            sort_fp = selectionsort;
			sort_map[sort_fp] = "Selection";
			break;

		case 'n': //
			keyin = GetInt("\tEnter sample size N: ");
			if (keyin <= 1) {
				cout << "\tExpecting a number greater than 1\n";
				break;
			}
            else{
                N = keyin;
                assert(list != nullptr);
                delete[] list;
                list = nullptr;
	            list = new (nothrow) int[N];   // create a list 
	            assert(list != nullptr);
	            for (int i = 0; i < N; i++) list[i] = i;
            }
			break;

		case 'r': //완료
			#if 1
			randomize_bruteforce(list, N);
			#else
			randomize(list, N);
			#endif
			break;

		case 'm'://완료
			show_n = GetInt("\tEnter max samples to show: ");
			break;

		case 'l'://완료
			per_line = GetInt("\tEnter max samples per line: ");
			break;
		
		case 'o'://완료 
            // use comp_fp, ::less, more and a ternary operator 
			// one-line code, use 
            comp_fp = (comp_fp == ::less) ? more : ::less;
			break;

		case 's'://완료
			begin = clock();// one-line code, use sort_fp, comp_fp
			sort_fp(list,N,comp_fp);
			show_timeit(begin); 
			break;

		default:
			break;
		}
	} while (choice != 'q');

	cout << "your code here\n";

	cout << "\tHappy Coding~~";
	return EXIT_SUCCESS;
}
